package ROTMGRoll;

/**
 * Data object for a roll
 * Typically generated by Roll.RollCalculator
 *
 * Holds any relevant field related to the calculated roll
 */
class Roll extends AbstractRoll {

    private double pct; //% to get specifically this value
    private double oneInX; //unused: odds to get specifically this value
    private double worsePct; // % chance to get a roll worse than this
    private double worseOneInX;  // odds to get a roll worse OR EQUAL than this
    private double betterPct; // % chance to get a roll  better than this
    private double betterOneInX; // odds to get a roll better OR EQUAL than this

    Roll(double probability, double worseProb, double betterProb) {
        System.out.println("sum of probabilities = " + (probability + worseProb + betterProb) + " (something is very wrong if ever != 1.0... save slight errors by double type inaccuracies)");

        pct = probability * 100;
        oneInX = 1.0 / probability;

        worsePct = worseProb * 100;
        betterPct = betterProb * 100;

        worseOneInX = 1.0 / (worseProb + probability);
        betterOneInX = 1.0 / (betterProb + probability);
    }

    public double getPct(){
        return pct;
    }

    public double getOneInX(){
        return oneInX;
    }

    public double getWorsePct() {
        return worsePct;
    }

    public double getWorseOneInX() {
        return worseOneInX;
    }

    public double getBetterPct() {
        return betterPct;
    }

    public double getBetterOneInX() {
        return betterOneInX;
    }

    public boolean isBadRoll(){
        return worseOneInX > betterOneInX;
    }
}
